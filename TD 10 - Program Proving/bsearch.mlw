module Binary_search

  use import int.Int
  use import int.ComputerDivision
  use import ref.Ref
  use import array.Array

  exception Break int

  let binary_search (a: array int) (v: int)
      ensures  { 0 <= result -> a[result] = v } (* Pour prouver 3 *)
      requires { forall i j:int. 0 <= i <= j < length a -> a[i] <= a[j] }
      (* Pour prouver 4*)
      ensures { (0 <= result) \/ result = -1} (* Pour prouver 5 *)
      ensures { (result = -1) -> forall i. 0 <= i < length a -> a[i] <> v }
      (* Pour prouver 5 encore *)
    =
    let l = ref 0 in
    let u = ref (length a - 1) in
    try
      while !l <= !u do
        invariant { 0 <= !l /\ !u < length a } (* Pour permettre de prouver 1 *)
        variant { !u - !l } (* Pour prouver 2 *)
        invariant {forall i. 0 <= i < length a -> 
            (a[i] = v -> !l <= i <= !u)} (* Pour permettre de prouver 5 *)
        
        let m = div (!l + !u) 2 in
        assert { !l <= m <= !u }; (* Preuve de 1 *)
        if a[m] < v then l := m + 1
        else if a[m] > v then u := m - 1
        else raise (Break m)
      done;
      -1
    with Break m ->
      m
    end

end